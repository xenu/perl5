name: testsuite

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "*"
  pull_request:

# I don't think that we can (safely) set TEST_JOBS=2 in the global environment,
# because on Win32 the various Makefile's `test` target is actually ./harness,
# and it would (attempt to) honour the $ENV{TEST_JOBS} setting. This won't end
# nicely as unlike BSD (etc), Win32 sockets can drop data at process exit, which
# would cause missing TAP and hence spurious test failures.

env:
  PERL_SKIP_TTY_TEST: 1
  CONTINUOUS_INTEGRATION: 1

jobs:
  #  ___           _         ___       __                    _   _
  # / __|_ __  ___| |_____  |_ _|_ _  / _|___ _ _ _ __  __ _| |_(_)___ _ _  ___
  # \__ \ '  \/ _ \ / / -_)  | || ' \|  _/ _ \ '_| '  \/ _` |  _| / _ \ ' \(_-<
  # |___/_|_|_\___/_\_\___| |___|_||_|_| \___/_| |_|_|_\__,_|\__|_\___/_||_/__/

  authors:
    runs-on: ubuntu-latest
    if: ( github.event.pull_request.head.repo.full_name == 'Perl/perl5' || github.repository == 'Perl/perl5' ) && github.base_ref != ''
    continue-on-error: true

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1000
      - name: git setup
        run: |
          echo "Pull request authors"
          echo "# git merge-base origin/${BASE_REF} HEAD"
          git config diff.renameLimit 999999
          git fetch --depth=1000 origin ${BASE_REF}
        env:
          BASE_REF: ${{ github.base_ref }}
      - name: Involved authors
        run: |
          git log --pretty=format:"Author: %an <%ae>" origin/${BASE_REF}...${SHA}^2 | sort -u
        env:
          BASE_REF: ${{ github.base_ref }}
          SHA: ${{ github.sha }}

  #     _    ____    _    _   _
  #    / \  / ___|  / \  | \ | |
  #   / _ \ \___ \ / _ \ |  \| |
  #  / ___ \ ___) / ___ \| |\  |
  # /_/   \_\____/_/   \_\_| \_|

  # Life is pain, highness. Anyone who says differently is selling something.

  ASAN:
    name: "ASAN"
    runs-on: ubuntu-latest
    timeout-minutes: 120

    strategy:
      matrix:
        # -DPURIFY disables arenas and mallocs everything individually. With
        # ASAN or similar it's the real torture test. However, we also need to
        # test that the arena code doesn't have any goofs.
        CONFIGURE_ARGS:
          - "-Accflags=-DPURIFY"
          - "-DDEBUGGING"
          - "-Dusethreads"

    steps:
      - name: Install System dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdbm-dev libdb-dev
      - uses: actions/checkout@v2
      - name: git cfg + fetch tags
        run: |
          git config diff.renameLimit 999999
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Configure
        run: |
          ./Configure -des -Dusedevel -Dcc="clang -fsanitize=address" -Dld="clang -fsanitize=address" ${{ matrix.CONFIGURE_ARGS }} -Dprefix="$HOME/perl-blead"
      - name: Build
        run: |
          PERL_DESTRUCT_LEVEL=2 make -j2 test_prep
      - name: Show Config
        run: |
          ASAN_OPTIONS=detect_leaks=0 ./perl -Ilib -V
          ASAN_OPTIONS=detect_leaks=0 ./perl -Ilib -e 'use Config; print Config::config_sh'
      - name: Run Tests
        run: |
          PERL_DESTRUCT_LEVEL=2 TEST_JOBS=2 ./perl t/harness ext/GDBM_File/t/*.t

  #  ____  _____ ____  _        _   _ _   _ ___ ____ ___  ____  _____
  # |  _ \| ____|  _ \| |      | | | | \ | |_ _/ ___/ _ \|  _ \| ____|
  # | |_) |  _| | |_) | |      | | | |  \| || | |  | | | | | | |  _|
  # |  __/| |___|  _ <| |___   | |_| | |\  || | |__| |_| | |_| | |___
  # |_|   |_____|_| \_\_____|___\___/|_| \_|___\____\___/|____/|_____|
  #                        |_____|

  # To the pain!

  PERL_UNICODE:
    name: "PERL_UNICODE"
    runs-on: ubuntu-latest
    timeout-minutes: 120

    strategy:
      matrix:
        # There are many many combinations we *could* test. These two are likely
        # to give the best overview - "basic sanity" and "everything maxed out"
        CONFIGURE_ARGS:
          - "-Dusethreads -Accflags=-DPURIFY -Dcc='gcc -fsanitize=address' -Dld='gcc -fsanitize=address'"

    steps:
      - name: Install System dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdbm-dev libdb-dev
      - uses: actions/checkout@v2
      - name: git cfg + fetch tags
        run: |
          git config diff.renameLimit 999999
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Show Locales
        run: locale -a
      - name: Configure
        run: |
          ./Configure -des -Dusedevel  ${{ matrix.CONFIGURE_ARGS }} -Dprefix="$HOME/perl-blead"
      - name: Build
        run: |
          LC_ALL=en_US.UTF-8 PERL_UNICODE="" PERL_DESTRUCT_LEVEL=2 make -j2 test_prep
      - name: Show Config
        run: |
          ASAN_OPTIONS=detect_leaks=0 ./perl -Ilib -V
          ASAN_OPTIONS=detect_leaks=0 ./perl -Ilib -e 'use Config; print Config::config_sh'
      - name: Run Tests
        run: |
          PERL_DESTRUCT_LEVEL=2 LC_ALL=en_US.UTF-8 PERL_UNICODE="" PERL_DESTRUCT_LEVEL=2 TEST_JOBS=2 ./perl t/harness ext/GDBM_File/t/*.t
